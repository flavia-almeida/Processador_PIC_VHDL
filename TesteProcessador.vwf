/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	PRINT_OPTIONS = "Print_options_version 6\
range_start 0ps\
range_end 1.0us\
width 1\
names_percentage 25\
comments 1\
grid_lines 1\
time_bars 1\
name_every_page 0\
expand_groups 0\
print_all 1\
print_row_height 100";
	DATA_OFFSET = 0.0;
	DATA_DURATION = 5000.0;
	SIMULATION_TIME = 5000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 160.0;
	GRID_DUTY_CYCLE = 50;
}

USER_TYPE("__control:inst10|pres_state")
{
	VALUES = "Undefined", "pres_state.rst", "pres_state.fetch_only", "pres_state.fet_dec_ex";
}

SIGNAL("abus")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 9;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("abus[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("nrst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("porta")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = BIDIR;
	PARENT = "";
}

SIGNAL("porta[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("portb")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = BIDIR;
	PARENT = "";
}

SIGNAL("portb[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[7]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[6]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[5]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[4]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[3]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[2]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[1]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[0]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[7]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[6]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[5]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[4]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[3]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[2]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[1]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[0]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("alu_z")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[13]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[12]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_q[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("lit_sel")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d_to_alu[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d_to_alu[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d_to_alu[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d_to_alu[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d_to_alu[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d_to_alu[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d_to_alu[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("d_to_alu[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("op_sel[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("op_sel[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("op_sel[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("op_sel[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("alu_r[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("alu_r[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("alu_r[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("alu_r[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("alu_r[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("alu_r[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("alu_r[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("alu_r[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("control:inst10|pres_state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__control:inst10|pres_state";
}

SIGNAL("PC_reg:inst13|PC")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 12;
	LSB_INDEX = 0;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("PC_reg:inst13|PC[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

SIGNAL("PC_reg:inst13|PC[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

SIGNAL("PC_reg:inst13|PC[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

SIGNAL("PC_reg:inst13|PC[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

SIGNAL("PC_reg:inst13|PC[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

SIGNAL("PC_reg:inst13|PC[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

SIGNAL("PC_reg:inst13|PC[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

SIGNAL("PC_reg:inst13|PC[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

SIGNAL("PC_reg:inst13|PC[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

SIGNAL("PC_reg:inst13|PC[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

SIGNAL("PC_reg:inst13|PC[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

SIGNAL("PC_reg:inst13|PC[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "PC_reg:inst13|PC";
}

GROUP("porta~result")
{
	MEMBERS = "porta[7]~result", "porta[6]~result", "porta[5]~result", "porta[4]~result", "porta[3]~result", "porta[2]~result", "porta[1]~result", "porta[0]~result";
}

GROUP("portb~result")
{
	MEMBERS = "portb[7]~result", "portb[6]~result", "portb[5]~result", "portb[4]~result", "portb[3]~result", "portb[2]~result", "portb[1]~result", "portb[0]~result";
}

GROUP("rom_q")
{
	MEMBERS = "rom_q[13]", "rom_q[12]", "rom_q[11]", "rom_q[10]", "rom_q[9]", "rom_q[8]", "rom_q[7]", "rom_q[6]", "rom_q[5]", "rom_q[4]", "rom_q[3]", "rom_q[2]", "rom_q[1]", "rom_q[0]";
}

GROUP("d_to_alu")
{
	MEMBERS = "d_to_alu[7]", "d_to_alu[6]", "d_to_alu[5]", "d_to_alu[4]", "d_to_alu[3]", "d_to_alu[2]", "d_to_alu[1]", "d_to_alu[0]";
}

GROUP("op_sel")
{
	MEMBERS = "op_sel[3]", "op_sel[2]", "op_sel[1]", "op_sel[0]";
}

GROUP("alu_r")
{
	MEMBERS = "alu_r[7]", "alu_r[6]", "alu_r[5]", "alu_r[4]", "alu_r[3]", "alu_r[2]", "alu_r[1]", "alu_r[0]";
}

TRANSITION_LIST("abus[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("abus[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 100.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 60.0;
			}
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("abus[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("abus[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 160.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 160.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("abus[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("abus[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 200.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
	}
}

TRANSITION_LIST("abus[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 100.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 60.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 60.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
	}
}

TRANSITION_LIST("abus[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 260.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 160.0;
			}
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 140.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 140.0;
	}
}

TRANSITION_LIST("abus[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 60.0;
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 140.0;
			}
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 120.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 140.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 10.0;
		NODE
		{
			REPEAT = 249;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("nrst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 4970.0;
	}
}

TRANSITION_LIST("porta[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[7]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[6]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[5]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[4]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[3]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[2]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[1]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[0]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[7]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 120.0;
		LEVEL 0 FOR 1400.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 220.0;
			LEVEL 0 FOR 1360.0;
		}
		LEVEL 1 FOR 220.0;
		LEVEL 0 FOR 100.0;
	}
}

TRANSITION_LIST("porta[6]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 120.0;
		LEVEL 0 FOR 1200.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 320.0;
	}
}

TRANSITION_LIST("porta[5]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 120.0;
		LEVEL 0 FOR 1000.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 520.0;
	}
}

TRANSITION_LIST("porta[4]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 120.0;
		LEVEL 0 FOR 800.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 720.0;
	}
}

TRANSITION_LIST("porta[3]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 120.0;
		LEVEL 0 FOR 600.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 920.0;
	}
}

TRANSITION_LIST("porta[2]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 120.0;
		LEVEL 0 FOR 400.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1120.0;
	}
}

TRANSITION_LIST("porta[1]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 120.0;
		LEVEL 0 FOR 200.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1320.0;
	}
}

TRANSITION_LIST("porta[0]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 120.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 160.0;
			LEVEL 0 FOR 1420.0;
		}
		LEVEL 1 FOR 100.0;
	}
}

TRANSITION_LIST("alu_z")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 2;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 60.0;
			}
			NODE
			{
				REPEAT = 6;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 100.0;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 60.0;
			}
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 100.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
	}
}

TRANSITION_LIST("rom_q[13]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("rom_q[12]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 80.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 20.0;
			}
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 20.0;
			}
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
	}
}

TRANSITION_LIST("rom_q[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 180.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 80.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("rom_q[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 300.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 6;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 360.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 320.0;
	}
}

TRANSITION_LIST("rom_q[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 180.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 120.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 100.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 120.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("rom_q[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 100.0;
			NODE
			{
				REPEAT = 6;
				NODE
				{
					REPEAT = 2;
					LEVEL 1 FOR 20.0;
					LEVEL 0 FOR 40.0;
				}
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 60.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("rom_q[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 100.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 60.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("rom_q[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("rom_q[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 160.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 160.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("rom_q[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("rom_q[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 200.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
	}
}

TRANSITION_LIST("rom_q[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
			NODE
			{
				REPEAT = 6;
				LEVEL 1 FOR 40.0;
				NODE
				{
					REPEAT = 2;
					LEVEL 0 FOR 40.0;
					LEVEL 1 FOR 20.0;
				}
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 20.0;
			}
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 20.0;
			}
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("rom_q[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 260.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 160.0;
			}
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 140.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 140.0;
	}
}

TRANSITION_LIST("rom_q[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 100.0;
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 100.0;
		}
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("lit_sel")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 140.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 140.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
	}
}

TRANSITION_LIST("d_to_alu[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 160.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL Z FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
		}
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("d_to_alu[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 160.0;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL Z FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 5;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 5;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
	}
}

TRANSITION_LIST("d_to_alu[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 160.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL Z FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
	}
}

TRANSITION_LIST("d_to_alu[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 160.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL Z FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
	}
}

TRANSITION_LIST("d_to_alu[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 160.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL Z FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
	}
}

TRANSITION_LIST("d_to_alu[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 160.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 4;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 4;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 4;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
	}
}

TRANSITION_LIST("d_to_alu[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 160.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 5;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 5;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 5;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
	}
}

TRANSITION_LIST("d_to_alu[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 160.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL Z FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL Z FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("op_sel[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 5000.0;
	}
}

TRANSITION_LIST("op_sel[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 100.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 180.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 360.0;
			NODE
			{
				REPEAT = 6;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 180.0;
			}
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 320.0;
	}
}

TRANSITION_LIST("op_sel[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 100.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 60.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 80.0;
			}
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("op_sel[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 80.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 100.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("alu_r[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 160.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 6;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 140.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 140.0;
	}
}

TRANSITION_LIST("alu_r[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 120.0;
		NODE
		{
			REPEAT = 5;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		NODE
		{
			REPEAT = 5;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		NODE
		{
			REPEAT = 5;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
	}
}

TRANSITION_LIST("alu_r[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 100.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
	}
}

TRANSITION_LIST("alu_r[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 120.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
	}
}

TRANSITION_LIST("alu_r[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 120.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
	}
}

TRANSITION_LIST("alu_r[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 80.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 40.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 40.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 40.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
	}
}

TRANSITION_LIST("alu_r[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 40.0;
		LEVEL 0 FOR 120.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
	}
}

TRANSITION_LIST("alu_r[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL U FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 20.0;
				LEVEL U FOR 20.0;
			}
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL U FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 20.0;
				LEVEL U FOR 20.0;
			}
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL U FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 20.0;
				LEVEL U FOR 20.0;
			}
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 60.0;
	}
}

TRANSITION_LIST("control:inst10|pres_state")
{
	NODE
	{
		REPEAT = 1;
		LEVEL pres_state.rst FOR 40.0;
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 120.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 60.0;
			NODE
			{
				REPEAT = 3;
				LEVEL pres_state.fetch_only FOR 20.0;
				LEVEL pres_state.fet_dec_ex FOR 20.0;
			}
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 60.0;
			NODE
			{
				REPEAT = 2;
				LEVEL pres_state.fetch_only FOR 20.0;
				LEVEL pres_state.fet_dec_ex FOR 20.0;
			}
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 20.0;
		NODE
		{
			REPEAT = 4;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 60.0;
			NODE
			{
				REPEAT = 3;
				LEVEL pres_state.fetch_only FOR 20.0;
				LEVEL pres_state.fet_dec_ex FOR 20.0;
			}
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 3;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 60.0;
			NODE
			{
				REPEAT = 2;
				LEVEL pres_state.fetch_only FOR 20.0;
				LEVEL pres_state.fet_dec_ex FOR 20.0;
			}
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 20.0;
		NODE
		{
			REPEAT = 4;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 60.0;
			NODE
			{
				REPEAT = 3;
				LEVEL pres_state.fetch_only FOR 20.0;
				LEVEL pres_state.fet_dec_ex FOR 20.0;
			}
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 3;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 40.0;
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 180.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 160.0;
			}
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 140.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 140.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 260.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 80.0;
				LEVEL 0 FOR 120.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 120.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 120.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 60.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 80.0;
				LEVEL 1 FOR 40.0;
			}
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 20.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
			}
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
			}
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
			}
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 40.0;
	}
}

TRANSITION_LIST("PC_reg:inst13|PC[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			NODE
			{
				REPEAT = 6;
				LEVEL 0 FOR 40.0;
				NODE
				{
					REPEAT = 3;
					LEVEL 1 FOR 20.0;
					LEVEL 0 FOR 20.0;
				}
				LEVEL 1 FOR 40.0;
			}
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
		}
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "nrst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "control:inst10|pres_state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
	CHILDREN = 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "PC_reg:inst13|PC[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
	CHILDREN = 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[13]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[12]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "rom_q[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "abus";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 31;
	TREE_LEVEL = 0;
	CHILDREN = 32, 33, 34, 35, 36, 37, 38, 39, 40;
}

DISPLAY_LINE
{
	CHANNEL = "abus[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "abus[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "abus[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "abus[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "abus[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 36;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "abus[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 37;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "abus[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "abus[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "abus[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "op_sel";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 41;
	TREE_LEVEL = 0;
	CHILDREN = 42, 43, 44, 45;
}

DISPLAY_LINE
{
	CHANNEL = "op_sel[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 42;
	TREE_LEVEL = 1;
	PARENT = 41;
}

DISPLAY_LINE
{
	CHANNEL = "op_sel[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 43;
	TREE_LEVEL = 1;
	PARENT = 41;
}

DISPLAY_LINE
{
	CHANNEL = "op_sel[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 44;
	TREE_LEVEL = 1;
	PARENT = 41;
}

DISPLAY_LINE
{
	CHANNEL = "op_sel[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 45;
	TREE_LEVEL = 1;
	PARENT = 41;
}

DISPLAY_LINE
{
	CHANNEL = "d_to_alu";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 46;
	TREE_LEVEL = 0;
	CHILDREN = 47, 48, 49, 50, 51, 52, 53, 54;
}

DISPLAY_LINE
{
	CHANNEL = "d_to_alu[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 47;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "d_to_alu[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 48;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "d_to_alu[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 49;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "d_to_alu[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 50;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "d_to_alu[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 51;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "d_to_alu[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 52;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "d_to_alu[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 53;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "d_to_alu[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 54;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "alu_r";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 55;
	TREE_LEVEL = 0;
	CHILDREN = 56, 57, 58, 59, 60, 61, 62, 63;
}

DISPLAY_LINE
{
	CHANNEL = "alu_r[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 56;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "alu_r[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 57;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "alu_r[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 58;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "alu_r[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 59;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "alu_r[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 60;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "alu_r[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 61;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "alu_r[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 62;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "alu_r[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 63;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "alu_z";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 64;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "porta";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 65;
	TREE_LEVEL = 0;
	CHILDREN = 66, 67, 68, 69, 70, 71, 72, 73;
}

DISPLAY_LINE
{
	CHANNEL = "porta[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 66;
	TREE_LEVEL = 1;
	PARENT = 65;
}

DISPLAY_LINE
{
	CHANNEL = "porta[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 67;
	TREE_LEVEL = 1;
	PARENT = 65;
}

DISPLAY_LINE
{
	CHANNEL = "porta[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 68;
	TREE_LEVEL = 1;
	PARENT = 65;
}

DISPLAY_LINE
{
	CHANNEL = "porta[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 69;
	TREE_LEVEL = 1;
	PARENT = 65;
}

DISPLAY_LINE
{
	CHANNEL = "porta[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 70;
	TREE_LEVEL = 1;
	PARENT = 65;
}

DISPLAY_LINE
{
	CHANNEL = "porta[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 71;
	TREE_LEVEL = 1;
	PARENT = 65;
}

DISPLAY_LINE
{
	CHANNEL = "porta[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 72;
	TREE_LEVEL = 1;
	PARENT = 65;
}

DISPLAY_LINE
{
	CHANNEL = "porta[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 73;
	TREE_LEVEL = 1;
	PARENT = 65;
}

DISPLAY_LINE
{
	CHANNEL = "porta~result";
	EXPAND_STATUS = EXPANDED;
	RADIX = Hexadecimal;
	TREE_INDEX = 74;
	TREE_LEVEL = 0;
	CHILDREN = 75, 76, 77, 78, 79, 80, 81, 82;
}

DISPLAY_LINE
{
	CHANNEL = "porta[7]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 75;
	TREE_LEVEL = 1;
	PARENT = 74;
}

DISPLAY_LINE
{
	CHANNEL = "porta[6]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 76;
	TREE_LEVEL = 1;
	PARENT = 74;
}

DISPLAY_LINE
{
	CHANNEL = "porta[5]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 77;
	TREE_LEVEL = 1;
	PARENT = 74;
}

DISPLAY_LINE
{
	CHANNEL = "porta[4]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 78;
	TREE_LEVEL = 1;
	PARENT = 74;
}

DISPLAY_LINE
{
	CHANNEL = "porta[3]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 79;
	TREE_LEVEL = 1;
	PARENT = 74;
}

DISPLAY_LINE
{
	CHANNEL = "porta[2]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 80;
	TREE_LEVEL = 1;
	PARENT = 74;
}

DISPLAY_LINE
{
	CHANNEL = "porta[1]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 81;
	TREE_LEVEL = 1;
	PARENT = 74;
}

DISPLAY_LINE
{
	CHANNEL = "porta[0]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 82;
	TREE_LEVEL = 1;
	PARENT = 74;
}

DISPLAY_LINE
{
	CHANNEL = "portb";
	EXPAND_STATUS = EXPANDED;
	RADIX = Hexadecimal;
	TREE_INDEX = 83;
	TREE_LEVEL = 0;
	CHILDREN = 84, 85, 86, 87, 88, 89, 90, 91;
}

DISPLAY_LINE
{
	CHANNEL = "portb[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 84;
	TREE_LEVEL = 1;
	PARENT = 83;
}

DISPLAY_LINE
{
	CHANNEL = "portb[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 85;
	TREE_LEVEL = 1;
	PARENT = 83;
}

DISPLAY_LINE
{
	CHANNEL = "portb[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 86;
	TREE_LEVEL = 1;
	PARENT = 83;
}

DISPLAY_LINE
{
	CHANNEL = "portb[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 87;
	TREE_LEVEL = 1;
	PARENT = 83;
}

DISPLAY_LINE
{
	CHANNEL = "portb[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 88;
	TREE_LEVEL = 1;
	PARENT = 83;
}

DISPLAY_LINE
{
	CHANNEL = "portb[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 89;
	TREE_LEVEL = 1;
	PARENT = 83;
}

DISPLAY_LINE
{
	CHANNEL = "portb[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 90;
	TREE_LEVEL = 1;
	PARENT = 83;
}

DISPLAY_LINE
{
	CHANNEL = "portb[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 91;
	TREE_LEVEL = 1;
	PARENT = 83;
}

DISPLAY_LINE
{
	CHANNEL = "portb~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 92;
	TREE_LEVEL = 0;
	CHILDREN = 93, 94, 95, 96, 97, 98, 99, 100;
}

DISPLAY_LINE
{
	CHANNEL = "portb[7]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 93;
	TREE_LEVEL = 1;
	PARENT = 92;
}

DISPLAY_LINE
{
	CHANNEL = "portb[6]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 94;
	TREE_LEVEL = 1;
	PARENT = 92;
}

DISPLAY_LINE
{
	CHANNEL = "portb[5]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 95;
	TREE_LEVEL = 1;
	PARENT = 92;
}

DISPLAY_LINE
{
	CHANNEL = "portb[4]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 96;
	TREE_LEVEL = 1;
	PARENT = 92;
}

DISPLAY_LINE
{
	CHANNEL = "portb[3]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 97;
	TREE_LEVEL = 1;
	PARENT = 92;
}

DISPLAY_LINE
{
	CHANNEL = "portb[2]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 98;
	TREE_LEVEL = 1;
	PARENT = 92;
}

DISPLAY_LINE
{
	CHANNEL = "portb[1]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 99;
	TREE_LEVEL = 1;
	PARENT = 92;
}

DISPLAY_LINE
{
	CHANNEL = "portb[0]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 100;
	TREE_LEVEL = 1;
	PARENT = 92;
}

DISPLAY_LINE
{
	CHANNEL = "lit_sel";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 101;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
