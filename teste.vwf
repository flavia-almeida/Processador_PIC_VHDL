/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	PRINT_OPTIONS = "Print_options_version 6\
range_start 0ps\
range_end 1.0us\
width 1\
names_percentage 25\
comments 1\
grid_lines 1\
time_bars 1\
name_every_page 0\
expand_groups 0\
print_all 1\
print_row_height 100";
	DATA_OFFSET = 0.0;
	DATA_DURATION = 5000.0;
	SIMULATION_TIME = 5000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

USER_TYPE("__control:inst11|currentState")
{
	VALUES = "Undefined", "currentState.RESET", "currentState.FETCH_ONLY", "currentState.FETCH_DECODE_EXECUTE";
}

USER_TYPE("__control:inst10|pres_state")
{
	VALUES = "Undefined", "pres_state.rst", "pres_state.fetch_only", "pres_state.fet_dec_ex";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("abus")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 9;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("abus[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("abus[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "abus";
}

SIGNAL("aluResult")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("aluResult[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "aluResult";
}

SIGNAL("aluResult[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "aluResult";
}

SIGNAL("aluResult[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "aluResult";
}

SIGNAL("aluResult[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "aluResult";
}

SIGNAL("aluResult[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "aluResult";
}

SIGNAL("aluResult[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "aluResult";
}

SIGNAL("aluResult[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "aluResult";
}

SIGNAL("aluResult[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "aluResult";
}

SIGNAL("aluZero")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dataToAlu")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dataToAlu[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dataToAlu";
}

SIGNAL("dataToAlu[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dataToAlu";
}

SIGNAL("dataToAlu[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dataToAlu";
}

SIGNAL("dataToAlu[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dataToAlu";
}

SIGNAL("dataToAlu[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dataToAlu";
}

SIGNAL("dataToAlu[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dataToAlu";
}

SIGNAL("dataToAlu[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dataToAlu";
}

SIGNAL("dataToAlu[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "dataToAlu";
}

SIGNAL("operationSelect")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("operationSelect[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "operationSelect";
}

SIGNAL("operationSelect[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "operationSelect";
}

SIGNAL("operationSelect[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "operationSelect";
}

SIGNAL("operationSelect[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "operationSelect";
}

SIGNAL("romOutput")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 14;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("romOutput[13]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[12]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("romOutput[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "romOutput";
}

SIGNAL("literalSelect")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = BIDIR;
	PARENT = "";
}

SIGNAL("porta[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("porta[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "porta";
}

SIGNAL("portb")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = BIDIR;
	PARENT = "";
}

SIGNAL("portb[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("portb[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "portb";
}

SIGNAL("porta[7]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[6]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[5]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[4]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[3]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[2]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[1]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("porta[0]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[7]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[6]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[5]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[4]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[3]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[2]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[1]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("portb[0]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("wreg")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("wreg[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "wreg";
}

SIGNAL("wreg[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "wreg";
}

SIGNAL("wreg[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "wreg";
}

SIGNAL("wreg[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "wreg";
}

SIGNAL("wreg[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "wreg";
}

SIGNAL("wreg[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "wreg";
}

SIGNAL("wreg[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "wreg";
}

SIGNAL("wreg[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "wreg";
}

SIGNAL("control:inst10|pres_state")
{
	VALUE_TYPE = ENUM;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = MACHINE;
	PARENT = "";
	ENUM_NAME = "__control:inst10|pres_state";
}

SIGNAL("control:inst10|load_pc")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("control:inst10|rd_en")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("control:inst10|stack_pop")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("control:inst10|stack_push")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("control:inst10|wr_c_en")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("control:inst10|wr_dc_en")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("control:inst10|wr_en")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("control:inst10|wr_w_reg_en")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("control:inst10|wr_z_en")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BURIED;
	PARENT = "";
}

SIGNAL("nrst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

GROUP("portar")
{
	MEMBERS = "porta[7]~result", "porta[6]~result", "porta[5]~result", "porta[4]~result", "porta[3]~result", "porta[2]~result", "porta[1]~result", "porta[0]~result";
}

GROUP("portbr")
{
	MEMBERS = "portb[7]~result", "portb[6]~result", "portb[5]~result", "portb[4]~result", "portb[3]~result", "portb[2]~result", "portb[1]~result", "portb[0]~result";
}

SIGNAL("INC_PC_PIN")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[12]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("NEXT_PC_PIN[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 250;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("abus[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("abus[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 70.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 100.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 100.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 100.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 60.0;
			}
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("abus[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("abus[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 130.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 110.0;
	}
}

TRANSITION_LIST("abus[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("abus[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 170.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 70.0;
	}
}

TRANSITION_LIST("abus[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 60.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 60.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 30.0;
	}
}

TRANSITION_LIST("abus[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 230.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 160.0;
			}
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 140.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 140.0;
		LEVEL 1 FOR 30.0;
	}
}

TRANSITION_LIST("abus[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 140.0;
			}
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 120.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 140.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 70.0;
	}
}

TRANSITION_LIST("aluResult[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 160.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 6;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 140.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 140.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("aluResult[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		NODE
		{
			REPEAT = 5;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		NODE
		{
			REPEAT = 5;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		NODE
		{
			REPEAT = 5;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("aluResult[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 130.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("aluResult[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 1 FOR 10.0;
	}
}

TRANSITION_LIST("aluResult[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 3;
			LEVEL U FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 80.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		LEVEL 1 FOR 10.0;
	}
}

TRANSITION_LIST("aluResult[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 80.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 40.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 40.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 40.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("aluResult[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("aluResult[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL U FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 20.0;
				LEVEL U FOR 20.0;
			}
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL U FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 20.0;
				LEVEL U FOR 20.0;
			}
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL U FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 20.0;
				LEVEL U FOR 20.0;
			}
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL U FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("aluZero")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL U FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 100.0;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 2;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 60.0;
			}
			NODE
			{
				REPEAT = 6;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 100.0;
				LEVEL U FOR 20.0;
				LEVEL 0 FOR 60.0;
			}
			LEVEL U FOR 20.0;
		}
		LEVEL 0 FOR 100.0;
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL U FOR 20.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("dataToAlu[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("dataToAlu[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("dataToAlu[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("dataToAlu[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("dataToAlu[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("dataToAlu[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("dataToAlu[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("dataToAlu[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("operationSelect[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 5000.0;
	}
}

TRANSITION_LIST("operationSelect[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 70.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 180.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 360.0;
			NODE
			{
				REPEAT = 6;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 180.0;
			}
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 350.0;
	}
}

TRANSITION_LIST("operationSelect[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 70.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 60.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 80.0;
			}
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("operationSelect[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 100.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 80.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 100.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("romOutput[13]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 80.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("romOutput[12]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 20.0;
			}
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 80.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 20.0;
			}
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
	}
}

TRANSITION_LIST("romOutput[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 80.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("romOutput[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 270.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 6;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 360.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 350.0;
	}
}

TRANSITION_LIST("romOutput[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 150.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 120.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 100.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 120.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
	}
}

TRANSITION_LIST("romOutput[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 70.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 100.0;
			NODE
			{
				REPEAT = 6;
				NODE
				{
					REPEAT = 2;
					LEVEL 1 FOR 20.0;
					LEVEL 0 FOR 40.0;
				}
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 60.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
	}
}

TRANSITION_LIST("romOutput[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 60.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
	}
}

TRANSITION_LIST("romOutput[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("romOutput[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 130.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 110.0;
	}
}

TRANSITION_LIST("romOutput[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("romOutput[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 170.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 70.0;
	}
}

TRANSITION_LIST("romOutput[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
			}
			NODE
			{
				REPEAT = 6;
				LEVEL 1 FOR 40.0;
				NODE
				{
					REPEAT = 2;
					LEVEL 0 FOR 40.0;
					LEVEL 1 FOR 20.0;
				}
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 20.0;
			}
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 20.0;
			}
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
	}
}

TRANSITION_LIST("romOutput[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 230.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 160.0;
			}
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 140.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 140.0;
		LEVEL 1 FOR 30.0;
	}
}

TRANSITION_LIST("romOutput[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 20.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 100.0;
				LEVEL 0 FOR 40.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 100.0;
		}
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 100.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 50.0;
	}
}

TRANSITION_LIST("literalSelect")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 140.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 140.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 110.0;
	}
}

TRANSITION_LIST("porta[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("portb[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 5000.0;
	}
}

TRANSITION_LIST("porta[7]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1490.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 220.0;
			LEVEL 0 FOR 1360.0;
		}
		LEVEL 1 FOR 220.0;
		LEVEL 0 FOR 130.0;
	}
}

TRANSITION_LIST("porta[6]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1290.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 350.0;
	}
}

TRANSITION_LIST("porta[5]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1090.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 550.0;
	}
}

TRANSITION_LIST("porta[4]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 890.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 750.0;
	}
}

TRANSITION_LIST("porta[3]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 690.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 950.0;
	}
}

TRANSITION_LIST("porta[2]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 490.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1150.0;
	}
}

TRANSITION_LIST("porta[1]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 290.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1380.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1350.0;
	}
}

TRANSITION_LIST("porta[0]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 130.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 160.0;
			LEVEL 0 FOR 1420.0;
		}
		LEVEL 1 FOR 130.0;
	}
}

TRANSITION_LIST("portb[7]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("portb[6]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("portb[5]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("portb[4]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("portb[3]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("portb[2]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("portb[1]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("portb[0]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("wreg[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 4890.0;
	}
}

TRANSITION_LIST("wreg[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("wreg[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("wreg[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("wreg[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("wreg[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 4890.0;
	}
}

TRANSITION_LIST("wreg[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("wreg[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 4950.0;
	}
}

TRANSITION_LIST("control:inst10|pres_state")
{
	NODE
	{
		REPEAT = 1;
		LEVEL pres_state.rst FOR 10.0;
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 120.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 60.0;
			NODE
			{
				REPEAT = 3;
				LEVEL pres_state.fetch_only FOR 20.0;
				LEVEL pres_state.fet_dec_ex FOR 20.0;
			}
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 60.0;
			NODE
			{
				REPEAT = 2;
				LEVEL pres_state.fetch_only FOR 20.0;
				LEVEL pres_state.fet_dec_ex FOR 20.0;
			}
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 20.0;
		NODE
		{
			REPEAT = 4;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 60.0;
			NODE
			{
				REPEAT = 3;
				LEVEL pres_state.fetch_only FOR 20.0;
				LEVEL pres_state.fet_dec_ex FOR 20.0;
			}
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 3;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 60.0;
			NODE
			{
				REPEAT = 2;
				LEVEL pres_state.fetch_only FOR 20.0;
				LEVEL pres_state.fet_dec_ex FOR 20.0;
			}
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 20.0;
		NODE
		{
			REPEAT = 4;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 60.0;
			NODE
			{
				REPEAT = 3;
				LEVEL pres_state.fetch_only FOR 20.0;
				LEVEL pres_state.fet_dec_ex FOR 20.0;
			}
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 3;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 40.0;
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL pres_state.fetch_only FOR 20.0;
			LEVEL pres_state.fet_dec_ex FOR 20.0;
		}
		LEVEL pres_state.fetch_only FOR 20.0;
		LEVEL pres_state.fet_dec_ex FOR 10.0;
	}
}

TRANSITION_LIST("control:inst10|load_pc")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 130.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 140.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 140.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 110.0;
	}
}

TRANSITION_LIST("control:inst10|rd_en")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 130.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 40.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 60.0;
				LEVEL 1 FOR 20.0;
			}
			NODE
			{
				REPEAT = 6;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 60.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 60.0;
				LEVEL 1 FOR 20.0;
			}
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 10.0;
	}
}

TRANSITION_LIST("control:inst10|stack_pop")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 170.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 70.0;
	}
}

TRANSITION_LIST("control:inst10|stack_push")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 130.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 110.0;
	}
}

TRANSITION_LIST("control:inst10|wr_c_en")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 270.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 6;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 180.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 360.0;
		}
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 180.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 350.0;
	}
}

TRANSITION_LIST("control:inst10|wr_dc_en")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("control:inst10|wr_en")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 60.0;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 80.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 100.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 10.0;
	}
}

TRANSITION_LIST("control:inst10|wr_w_reg_en")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 1560.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 150.0;
	}
}

TRANSITION_LIST("control:inst10|wr_z_en")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1560.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 150.0;
	}
}

TRANSITION_LIST("nrst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 5000.0;
	}
}

TRANSITION_LIST("INC_PC_PIN")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 120.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 140.0;
				LEVEL 0 FOR 20.0;
				LEVEL 1 FOR 20.0;
			}
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 60.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 140.0;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 110.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[12]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 130.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 160.0;
			}
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 140.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 140.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 90.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5000.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 210.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 80.0;
				LEVEL 0 FOR 120.0;
			}
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 160.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 120.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 50.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 70.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 60.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
				LEVEL 0 FOR 80.0;
				LEVEL 1 FOR 40.0;
			}
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 50.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 1 FOR 20.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
			}
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
			}
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 20.0;
			LEVEL 1 FOR 20.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 40.0;
				LEVEL 1 FOR 40.0;
			}
		}
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 10.0;
	}
}

TRANSITION_LIST("NEXT_PC_PIN[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			NODE
			{
				REPEAT = 6;
				LEVEL 0 FOR 40.0;
				NODE
				{
					REPEAT = 3;
					LEVEL 1 FOR 20.0;
					LEVEL 0 FOR 20.0;
				}
				LEVEL 1 FOR 40.0;
			}
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
		}
		LEVEL 1 FOR 20.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 40.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 20.0;
				LEVEL 0 FOR 20.0;
			}
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 20.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "control:inst10|load_pc";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "control:inst10|rd_en";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "control:inst10|stack_pop";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "control:inst10|stack_push";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "control:inst10|wr_c_en";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "control:inst10|wr_dc_en";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "control:inst10|wr_en";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 7;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "control:inst10|wr_w_reg_en";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 8;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "control:inst10|wr_z_en";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "control:inst10|pres_state";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nrst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "aluResult";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
	CHILDREN = 13, 14, 15, 16, 17, 18, 19, 20;
}

DISPLAY_LINE
{
	CHANNEL = "aluResult[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "aluResult[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "aluResult[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "aluResult[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "aluResult[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "aluResult[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "aluResult[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "aluResult[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "aluZero";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "dataToAlu";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 0;
	CHILDREN = 23, 24, 25, 26, 27, 28, 29, 30;
}

DISPLAY_LINE
{
	CHANNEL = "dataToAlu[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "dataToAlu[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "dataToAlu[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "dataToAlu[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "dataToAlu[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "dataToAlu[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "dataToAlu[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "dataToAlu[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 22;
}

DISPLAY_LINE
{
	CHANNEL = "operationSelect";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 31;
	TREE_LEVEL = 0;
	CHILDREN = 32, 33, 34, 35;
}

DISPLAY_LINE
{
	CHANNEL = "operationSelect[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "operationSelect[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "operationSelect[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "operationSelect[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "literalSelect";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 36;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "porta";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 37;
	TREE_LEVEL = 0;
	CHILDREN = 38, 39, 40, 41, 42, 43, 44, 45;
}

DISPLAY_LINE
{
	CHANNEL = "porta[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "porta[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "porta[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "porta[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 41;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "porta[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 42;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "porta[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 43;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "porta[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 44;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "porta[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 45;
	TREE_LEVEL = 1;
	PARENT = 37;
}

DISPLAY_LINE
{
	CHANNEL = "portb";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 46;
	TREE_LEVEL = 0;
	CHILDREN = 47, 48, 49, 50, 51, 52, 53, 54;
}

DISPLAY_LINE
{
	CHANNEL = "portb[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 47;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "portb[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 48;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "portb[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 49;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "portb[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 50;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "portb[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 51;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "portb[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 52;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "portb[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 53;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "portb[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 54;
	TREE_LEVEL = 1;
	PARENT = 46;
}

DISPLAY_LINE
{
	CHANNEL = "portar";
	EXPAND_STATUS = EXPANDED;
	RADIX = Binary;
	TREE_INDEX = 55;
	TREE_LEVEL = 0;
	CHILDREN = 56, 57, 58, 59, 60, 61, 62, 63;
}

DISPLAY_LINE
{
	CHANNEL = "porta[7]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 56;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "porta[6]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 57;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "porta[5]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 58;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "porta[4]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 59;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "porta[3]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 60;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "porta[2]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 61;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "porta[1]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 62;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "porta[0]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 63;
	TREE_LEVEL = 1;
	PARENT = 55;
}

DISPLAY_LINE
{
	CHANNEL = "portbr";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 64;
	TREE_LEVEL = 0;
	CHILDREN = 65, 66, 67, 68, 69, 70, 71, 72;
}

DISPLAY_LINE
{
	CHANNEL = "portb[7]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 65;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "portb[6]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 66;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "portb[5]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 67;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "portb[4]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 68;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "portb[3]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 69;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "portb[2]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 70;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "portb[1]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 71;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "portb[0]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 72;
	TREE_LEVEL = 1;
	PARENT = 64;
}

DISPLAY_LINE
{
	CHANNEL = "wreg";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 73;
	TREE_LEVEL = 0;
	CHILDREN = 74, 75, 76, 77, 78, 79, 80, 81;
}

DISPLAY_LINE
{
	CHANNEL = "wreg[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 74;
	TREE_LEVEL = 1;
	PARENT = 73;
}

DISPLAY_LINE
{
	CHANNEL = "wreg[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 75;
	TREE_LEVEL = 1;
	PARENT = 73;
}

DISPLAY_LINE
{
	CHANNEL = "wreg[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 76;
	TREE_LEVEL = 1;
	PARENT = 73;
}

DISPLAY_LINE
{
	CHANNEL = "wreg[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 77;
	TREE_LEVEL = 1;
	PARENT = 73;
}

DISPLAY_LINE
{
	CHANNEL = "wreg[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 78;
	TREE_LEVEL = 1;
	PARENT = 73;
}

DISPLAY_LINE
{
	CHANNEL = "wreg[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 79;
	TREE_LEVEL = 1;
	PARENT = 73;
}

DISPLAY_LINE
{
	CHANNEL = "wreg[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 80;
	TREE_LEVEL = 1;
	PARENT = 73;
}

DISPLAY_LINE
{
	CHANNEL = "wreg[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 81;
	TREE_LEVEL = 1;
	PARENT = 73;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 82;
	TREE_LEVEL = 0;
	CHILDREN = 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[13]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 83;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[12]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 84;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 85;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 86;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 87;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 88;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 89;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 90;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 91;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 92;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 93;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 94;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 95;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "romOutput[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 96;
	TREE_LEVEL = 1;
	PARENT = 82;
}

DISPLAY_LINE
{
	CHANNEL = "abus";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 97;
	TREE_LEVEL = 0;
	CHILDREN = 98, 99, 100, 101, 102, 103, 104, 105, 106;
}

DISPLAY_LINE
{
	CHANNEL = "abus[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 98;
	TREE_LEVEL = 1;
	PARENT = 97;
}

DISPLAY_LINE
{
	CHANNEL = "abus[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 99;
	TREE_LEVEL = 1;
	PARENT = 97;
}

DISPLAY_LINE
{
	CHANNEL = "abus[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 100;
	TREE_LEVEL = 1;
	PARENT = 97;
}

DISPLAY_LINE
{
	CHANNEL = "abus[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 101;
	TREE_LEVEL = 1;
	PARENT = 97;
}

DISPLAY_LINE
{
	CHANNEL = "abus[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 102;
	TREE_LEVEL = 1;
	PARENT = 97;
}

DISPLAY_LINE
{
	CHANNEL = "abus[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 103;
	TREE_LEVEL = 1;
	PARENT = 97;
}

DISPLAY_LINE
{
	CHANNEL = "abus[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 104;
	TREE_LEVEL = 1;
	PARENT = 97;
}

DISPLAY_LINE
{
	CHANNEL = "abus[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 105;
	TREE_LEVEL = 1;
	PARENT = 97;
}

DISPLAY_LINE
{
	CHANNEL = "abus[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 106;
	TREE_LEVEL = 1;
	PARENT = 97;
}

DISPLAY_LINE
{
	CHANNEL = "INC_PC_PIN";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 107;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[12]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 108;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 109;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 110;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 111;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 112;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 113;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 114;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 115;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 116;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 117;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 118;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 119;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "NEXT_PC_PIN[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 120;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
